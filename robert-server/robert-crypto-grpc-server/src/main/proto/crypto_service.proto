
// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "fr.gouv.stopc.robert.crypto.grpc.server.service.others";
option java_outer_classname = "CryptoGrpcService";
option objc_class_prefix = "";

package robert.server.crypto;

// The greeting service definition.
service CryptoGrpcServiceImpl {
  // Streams a many greetings
  rpc generateEphemeralTuple (EphemeralTupleRequest) returns (stream EphemeralTupleResponse) {}
  rpc generateEBID(GenerateEBIDRequest) returns (EBIDResponse){}
  rpc decryptEBID(DecryptEBIDRequest) returns (EBIDResponse){}
  rpc encryptCountryCode(EncryptCountryCodeRequest) returns (EncryptCountryCodeResponse){}
  rpc decryptCountryCode(DecryptCountryCodeRequest) returns (DecryptCountryCodeResponse){}
  rpc generateMacHello(MacHelloGenerationRequest) returns (MacHelloGenerationResponse){}
  rpc validateMacHello(MacHelloValidationRequest) returns (MacValidationResponse){}
  rpc validateMacEsr(MacEsrValidationRequest) returns (MacValidationResponse){}
  rpc validateMacForType(MacValidationForTypeRequest) returns (MacValidationResponse){}
}

// The request message containing the user's name.
message EphemeralTupleRequest {
	// byte[] IDA of Registration
	// int currentEpochID
	// int numberOfEpochsToGenerate
	// byte countryCode;
	
	bytes idA = 1;
	int32 currentEpochID = 2;
	int32 numberOfEpochsToGenerate = 3;
	bytes countryCode = 4;
	
}

// The response message containing the greetings
 message EphemeralTupleResponse {
	// int epochId;
	// byte[] ebid;
	// byte[] ecc;
	int32 epochId = 1;
	bytes ebid = 2;
	bytes ecc = 3;
}

message GenerateEBIDRequest {
	// byte[] IDA of Registration
	// int currentEpochID
	bytes idA = 1;
	int32 epochId = 2;
	
}

message EBIDResponse {

	bytes ebid = 1;
}

message DecryptEBIDRequest {
	bytes ebid = 1;
}

message EncryptCountryCodeRequest {
	//  byte[] ebid;
	// byte countryCode;
	bytes ebid = 1;
	bytes countryCode = 2;
}

message EncryptCountryCodeResponse {

	// byte[] encryptedCountryCode;
	bytes encryptedCountryCode = 1;
}

message DecryptCountryCodeRequest {
	//  byte[] ebid;
	// byte encryptedCountryCode;
	bytes ebid = 1;
	bytes encryptedCountryCode = 2;
}

message DecryptCountryCodeResponse {

	// byte[] countryCode;
	bytes countryCode = 1;
}

message MacHelloGenerationRequest {
	// byte[] KA;
	// byte[] helloMessage;
	bytes ka = 1;
	bytes helloMessage = 2;
}

message MacHelloGenerationResponse {

	// byte[] macHelloMessage;
	bytes macHelloMessage = 1;
}

message MacHelloValidationRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	bytes ka = 1;
	bytes dataToValidate = 2;
}
message MacValidationResponse {

	// boolean isValid;
	bool isValid = 1;
}

message MacEsrValidationRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	// byte[] macToMatchWith;
	bytes ka = 1;
	bytes dataToValidate = 2;
	bytes macToMatchWith = 3;
}

message MacValidationForTypeRequest {
	// byte[] KA;
	// byte[] dataToValidate;
	// byte[] macToMatchWith;
	// byte prefixes;
	bytes ka = 1;
	bytes dataToValidate = 2;
	bytes macToMatchWith = 3;
	bytes prefixe = 4;
}

