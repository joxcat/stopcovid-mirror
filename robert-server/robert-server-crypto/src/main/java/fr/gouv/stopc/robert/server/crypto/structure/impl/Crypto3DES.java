package fr.gouv.stopc.robert.server.crypto.structure.impl;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;

import fr.gouv.stopc.robert.server.crypto.structure.CryptoCipherStructureAbstract;
import lombok.extern.slf4j.Slf4j;

/**
 * Triple Data Encryption Algorithm -- TripleDES or 3DES
 *
 */
@Slf4j
public class Crypto3DES extends CryptoCipherStructureAbstract {

    /**
     * key to use to generate {@link #cipher} and {@link #key} in {@link #Crypto3DES(byte[])}
     */
    private static final String DESEDE_ENCRYPTION_CIPHER_SCHEME = "DESede/CBC/Nopadding";

    private static final String DESEDE_ENCRYPTION_KEY_SCHEME = "DESede";

    private static final IvParameterSpec iv = new IvParameterSpec(new byte[8]);


    /**
     * Cipher initialize with DESEDE_ENCRYPTION_CIPHER_SCHEME
     * Should be used with the SecretKey key
     */
    private final Cipher cipher;

    /**
     * Cipher SecretKey with DESEDE_ENCRYPTION_KEY_SCHEME
     */
    private final SecretKey key;


    /**
     * @param keyServer key generated by server at first ROBERT start.
     */
    public Crypto3DES(byte[] keyServer) {
        Cipher cipher = null;
        SecretKey key = null;
        try {

            // Generate encryption key with server key.
            KeySpec ks = new DESedeKeySpec(keyServer);
            key = SecretKeyFactory.getInstance(DESEDE_ENCRYPTION_KEY_SCHEME).generateSecret(ks);

            // Create cipher with DESEDE encryption scheme.
            cipher = Cipher.getInstance(DESEDE_ENCRYPTION_CIPHER_SCHEME);

        } catch (InvalidKeyException e) {
            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
        } catch (NoSuchAlgorithmException e) {
            log.error(String.format("Algorithm %s is not available", DESEDE_ENCRYPTION_CIPHER_SCHEME));
        } catch (InvalidKeySpecException | NoSuchPaddingException e2) {
            log.error(String.format("key %s is not available", DESEDE_ENCRYPTION_KEY_SCHEME));
        } finally {
            this.cipher = cipher;
            this.key = key;
        }
    }

    @Override
    public IvParameterSpec getIv() {
        return this.iv;
    }

    /**
     * @see {@link #cipher}
     * @return
     */
    @Override
    public Cipher getCipher() {
        return this.cipher;
    }

    /**
     * @see {@link #key}
     * @return
     */
    @Override
    public SecretKey getSecretKey() {
        return this.key;
    }
}
