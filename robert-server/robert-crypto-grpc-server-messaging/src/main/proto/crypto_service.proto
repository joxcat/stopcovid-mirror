// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "fr.gouv.stopc.robert.crypto.grpc.server.messaging";
option java_outer_classname = "CryptoGrpcService";
option objc_class_prefix = "";

package robert.server.crypto;

service CryptoGrpcServiceImpl {
	rpc createRegistration(CreateRegistrationRequest) returns (CreateRegistrationResponse){}
	rpc getIdFromAuth(GetIdFromAuthRequest) returns (GetIdFromAuthResponse){}
	rpc getIdFromStatus(GetIdFromStatusRequest) returns (GetIdFromStatusResponse){}
	rpc getInfoFromHelloMessage(GetInfoFromHelloMessageRequest) returns (GetInfoFromHelloMessageResponse){}
	rpc deleteId(DeleteIdRequest) returns (DeleteIdResponse){}
	rpc reloadHSM(ReloadHSMRequest) returns (ReloadHSMResponse){}
	rpc getHSMCacheStatus(HSMCacheStatusRequest) returns (HSMCacheStatusResponse){}
}

message ReloadHSMRequest {
	string pin = 1;
	string configFileName = 2;
}

message ReloadHSMResponse {
	bool success = 1;
}

message HSMCacheStatusRequest {
}

message HSMCacheStatusResponse {
	repeated string aliases = 1;
}

message ErrorMessage {
	int32 code = 1;
	string description = 2;
}

message CreateRegistrationRequest {
	bytes clientPublicKey = 1;
	int32 fromEpochId = 2;
	int32 numberOfDaysForEpochBundles = 3; // the number of days for which ephemeral bundles must be generated
	bytes serverCountryCode = 4; // the country code configured on the server to be used when generating ECCs
}

message CreateRegistrationResponse {
	bytes idA = 1;
	bytes tuples = 2;
	ErrorMessage error = 3;
}

message GetIdFromAuthRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
	int32 requestType = 5;
}

message GetIdFromAuthResponse {
	bytes idA = 1;
	int32 epochId = 2;
	ErrorMessage error = 3;
}

message GetIdFromStatusRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
	int32 fromEpochId = 5;
	int32 numberOfDaysForEpochBundles = 6;
	bytes serverCountryCode = 7;
}

message GetIdFromStatusResponse {
	bytes idA = 1;
	int32 epochId = 2;
	bytes tuples = 3;
	ErrorMessage error = 4;
}

message GetInfoFromHelloMessageRequest {
	bytes ecc = 1;
	bytes ebid = 2;
	bytes mac = 3;
	int32 timeSent = 4; // time hello message was sent from emitting device (unsigned 16 bits)
	int64 timeReceived = 5; // time hello message was received on device (unsigned 32 bits, stored in long)
	bytes serverCountryCode = 6;
}

message GetInfoFromHelloMessageResponse {
	bytes countryCode = 1;
	bytes idA = 2;
	int32 epochId = 3;
	ErrorMessage error = 4;
}

message DeleteIdRequest {
	bytes ebid = 1;
	int32 epochId = 2;
	int64 time = 3;
	bytes mac = 4;
}

message DeleteIdResponse {
	bytes idA = 1;
	ErrorMessage error = 2;
}
