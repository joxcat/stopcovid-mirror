openapi: 3.0.0
info:
  description: "#STOPCOVID, Robert Proximity Tracing Client API"
  version: 3.0.0
  title: "#STOPCOVID, Robert Proximity Tracing"
  termsOfService: https://github.com/ROBERT-proximity-tracing/
  contact:
    email: stopcovid@inria.fr
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags: []
paths:
  /captcha:
    post:
      tags: [ "captcha" ]
      summary: Create a CAPTCHA
      description: |-
        Request the creation of a CAPTCHA challenge. A CAPTCHA Id is returned.


        Both CAPTCHA Id and CAPTCHA resolution must be provided as input to the /register service.


        A locale must be passed to localize the CAPTCHA.


        A type must be passed to request visual/audio format.
      operationId: captcha
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaptchaGenerationRequest"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaptchaGenerationSuccessResponse"
        "400":
          description: bad request
      security: []
  /captcha/{captchaId}/image:
    get:
      tags: [ "captcha" ]
      summary: Get image CAPTCHA
      description: Get image version of the CAPTCHA challenge
      operationId: captchaChallengeImage
      parameters:
        - name: captchaId
          in: path
          description: CAPTCHA Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            image/png:
              schema:
                type: string
                format: binary        
        "400":
          description: CAPTCHA Id not found
        "404":
          description: CAPTCHA Id not found, bad URL pattern
        "410":
          description: CAPTCHA Id already used
      security: []
  /captcha/{captchaId}/audio:
    get:
      tags: [ "captcha" ]
      summary: Get audio CAPTCHA
      description: Get audio version of the CAPTCHA challenge
      operationId: captchaChallengeAudio
      parameters:
        - name: captchaId
          in: path
          description: CAPTCHA Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            audio/wav:
              schema:
                type: string
                format: binary        
        "400":
          description: CAPTCHA Id not found
        "404":
          description: CAPTCHA Id not found, bad URL pattern
        "410":
          description: CAPTCHA Id already used
      security: []
  /register:
    post:
      tags: []
      summary: Register app
      description: |-
        Register the app to the ROBERT service.


        Requires a CAPTCHA resolution token (and its ID) that will be verified by the server.


        To be called once during app first startup.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterSuccessResponse"
        "400":
          description: bad request
        "401":
          description: bad captcha
      security: []
  /status:
    post:
      tags: []
      summary: Exposure Status Request
      description: >-
        App requests if its user has been exposed


        The request is a POST even if no information is contributed to the server because parameters should not be passed as queryparams.


        App should continue to send ESR requests even after having been notified of a risk, in case new risks are detected.


        This request must the '0x02' salt when creating its MAC digest
      operationId: ESR
      requestBody:
        $ref: "#/components/requestBodies/ExposureStatusRequest"
      responses:
        "200":
          description: Returns whether the app user was exposed to a risk. The app must
            display associated hardcoded content accordingly and send local
            notification.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExposureStatusResponse"
        "400":
          description: bad request
        "401":
          description: invalid authentication
  /report:
    post:
      tags: []
      summary: Report contact history
      description: >-
        Report contacts from the last X days stored by the app once user has
        been diagnosed as infected by a healthcare professional.


        Requires a code provided by a healthcare professional or a healthcare institution (e.g. lab).


        Once the app has successfully reported its data, it should call the /unregister endpoint to remove its id from the server.
      operationId: ReportBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportBatchRequest"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportBatchResponse"
        "400":
          description: bad request
        "401":
          description: invalid authentication
      security: []
  /unregister:
    post:
      tags: []
      summary: Unregister app
      description: >-
        User wants to stop using the ROBERT service. Delete all data related to this user from the server


        This request must use the '0x03' salt when creating its MAC digest
      operationId: unregister
      requestBody:
        $ref: "#/components/requestBodies/UnregisterRequest"
      responses:
        "200":
          description: Returns whether unregistering was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnregisterResponse"
        "400":
          description: bad request
        "401":
          description: invalid authentication
  /deleteExposureHistory:
    post:
      tags: []
      summary: Delete exposure history
      description: >-
        User wants to delete his exposure history from the back-end. User must still have a valid EBID


        This request must use the '0x04' salt when creating its MAC digest
      operationId: deleteExposureHistory
      requestBody:
        $ref: "#/components/requestBodies/AuthentifiedRequest"
      responses:
        "200":
          description: Returns whether exposure history was deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnregisterResponse"
        "400":
          description: bad request
        "401":
          description: invalid authentication
externalDocs:
  description: Find out more about ROBERT
  url: https://github.com/ROBERT-proximity-tracing/
servers:
  - url: https://yourrobertserver.org/v3
components:
  requestBodies:
    AuthentifiedRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthentifiedRequest"
    ExposureStatusRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExposureStatusRequest"
    UnregisterRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UnregisterRequest"
  schemas:
    UnregisterResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      required:
        - success
    AuthentifiedRequest:
      type: object
      properties:
        ebid:
          description: >-
            Any EBID from the local store valid for this epoch as 64-bit, Base64
            encoded


            Raw content must be 64 bits. Base64 string must be 12 chars.
          type: string
          format: byte
        epochId:
          description: The id of the epoch for which the EBID was generated.
          type: integer
        time:
          description: |-
            The current time as 32-bit timestamp, Base64 encoded


            Raw content must be 32 bits. Base64 string must be 8 chars.
          type: string
          format: byte
        mac:
          description: |-
            The MAC digest for this request, Base64 encoded


            Raw content must be 256 bits. Base64 string must be 44 chars.
          type: string
          format: byte
      required:
        - ebid
        - epochId
        - time
        - mac
    UnregisterRequest:
      allOf:
        - $ref: '#/components/schemas/AuthentifiedRequest'
        - type: object
          properties:
            pushToken:
              type: string
              description: The push token that is associated with the app in order to delete it from the database
    ExposureStatusRequest:
      allOf:
        - $ref: '#/components/schemas/AuthentifiedRequest'
        - type: object
          properties:
            pushInfo:
              $ref: "#/components/schemas/PushInfo"
              description: Information to configure push notifications
    ExposureStatusResponse:
      type: object
      properties:
        atRisk:
          type: boolean
          description: True if was exposed at risk. If already notified of a risk exposure,
            means exposed to a new risk since.
        lastExposureTimeframe:
          type: integer
          format: int32
          description: |-
            Optional. Provided only if atRisk=true. 
            

            The timeframe during which the user was exposed. In days. Resolution of 2 days 
            (e.g. 2 => user was exposed during the last 2 days, 
            4 => user was exposed during the last 4 days...)
        message:
          type: string
        tuples:
          type: string
          format: byte
          description: >-
            Tuples of identifiers to be used by the app during the epochs.
            Encrypted JSON string specified in the 'IdList' type, use
            dedicated client-side key to decrypt.


            Base64 encoded
        config:
          $ref: "#/components/schemas/ClientConfiguration"
      required:
        - atRisk
        - idsForEpochs
        - config
        - tuples
    RegisterRequest:
      type: object
      properties:
        captcha:
          type: string
          description: The CAPTCHA resolution token obtained by the app. Required to
            complete the user registration process
        captchaId:
          type: string
          description: The CAPTCHA Id as provided in the /captcha response
        clientPublicECDHKey:
          type: string
          description: >-
            Client public key to be used by server to derive shared secret and keys.


            Base64 encoded
        pushInfo:
          $ref: "#/components/schemas/PushInfo"
          description: Information to configure push notifications
      required:
        - captcha
        - captchaId
        - clientPublicECDHKey
    RegisterSuccessResponse:
      type: object
      properties:
        tuples:
          type: string
          format: byte
          description: >-
            Tuples of identifiers to be used by the app during the epochs.
            Encrypted JSON string specified in the 'IdList' type, use
            dedicated client-side key to decrypt.


            Base64 encoded
        timeStart:
          type: integer
          format: int64
          description: The time from which epochs were started for the ROBERT service
        config:
          $ref: "#/components/schemas/ClientConfiguration"
        message:
          type: string
      required:
        - tuples
        - config
        - timeStart
    CaptchaGenerationRequest:
      type: object
      properties:
        type:
          type: string
          description: IMAGE or AUDIO (provided for accessibility)
        locale:
          type: string
          description: |-
            The locale that will be used to generate the CAPTCHA as an image or an audio clip.

            Supported locales for IMAGE: "ar" for arabic alphabet; defaults to latin characters

            Supported locales for AUDIO: "en", "es", "ar", "pt", "de", "it", "fr"; defaults to "fr"
      required:
        - type
        - locale
    CaptchaGenerationSuccessResponse:
      type: object
      properties:
        id:
          type: string
          description: The ID of the generated CAPTCHA
      required:
        - id
    ReportBatchRequest:
      type: object
      properties:
        token:
          description: Short or long code/token provided by healthcare professional and possibly scanned as a QR code
          type: string
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
          description: >-
            Optional (either 'contacts' or 'contactsAsBinary' must be provided).


            The list of contacts stored in the LocalProximityList (local contacts DB)
        contactsAsBinary:
          description: >-
            WIP - DO NOT USE. Optional (either 'contacts' or 'contactsAsBinary'
            must be provided).


            A protobuf containing the same data as the 'contacts' parameter. Encoded as Base64
          type: string
          format: byte
      required:
        - token
    ReportBatchResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
      description: Upon success, app should unregister.
      required:
        - success
    KeyPair:
      type: object
      properties:
        ebid:
          type: string
          format: byte
          description: |-
            Encrypted Bluetooth IDentifier.


            Raw content must be 64 bits. Base64 string must be 12 chars.
        ecc:
          type: string
          format: byte
          description: |-
            Encrypted Country Code.


            Raw content must be 8 bits. Base64 string must be 4 chars.
      required:
        - ebid
        - ecc
    Contact:
      type: object
      properties:
        ebid:
          type: string
          format: byte
          description: |-
            Encrypted Bluetooth IDentifier.

            Raw content must be 64 bits. Base64 string must be 12 chars.
        ecc:
          type: string
          format: byte
          description: |-
            Encrypted Country Code.


            Raw content must be 8 bits. Base64 string must be 4 chars.
        ids:
          type: array
          items:
            $ref: "#/components/schemas/HelloMessageDetail"
          description: List of (time_device, time_hello, MAC) tuples
      required:
        - ids
        - ecc
        - ebid
      description: All keys encountered for an epoch for an identical EBID (a "contact").
        Reported keys must be removed LocalProximityHistory DB upon success of
        this request
    HelloMessageDetail:
      type: object
      properties:
        timeCollectedOnDevice:
          type: integer
          format: int32
          description: Timestamp at which the current device collected the HELLO messages
        timeFromHelloMessage:
          type: integer
          format: int16
          description: Timestamp included in the HELLO message
        mac:
          type: string
          format: byte
          description: |-
            MAC digest for validation of ebid and ecc to prevent forging.


            Raw content must be 40 bits. Base64 string must be 8 chars.
        rssiCalibrated:
          type: integer
          description: Calibrated RSSI (as 8-bit) measured when HELLO message was received,
            then normalized by client app filtering algorithm
      required:
        - timeFromHelloMessage
        - timeCollectedOnDevice
        - mac
        - rssiCalibrated
    IdList:
      type: array
      items:
        type: object
        properties:
          epochId:
            type: integer
            format: int32
            description: Epoch identifier for which the accompagnying ids are generated
          key:
            $ref: "#/components/schemas/KeyPair"
      description: Identifiers to be broadcast by the app during the next M epochs.
        Provided as (EBID, ECC, epochid) tuples.
    PushInfo:
      type: object
      description: Information to configure push notifications
      properties:
        token:
          type: string
          description: The push token as provided by the OS for the app
        locale:
          type: string
          description: The locale of the phone as an ISO-639 code (e.g. fr-FR, en-US), used to localize the text sent in the push notification messages
        timezone:
          type: string
          description: The timezone of the phone as a TZ Database name (e.g. Europe/Paris, Indian/Reunion, America/Cayenne), used to schedule the sending of the notification during the day only
      required:
        - token
        - locale
        - timezone
    ClientConfiguration:
      type: array
      items:
        $ref: "#/components/schemas/ConfigurationProperty"
      description: A list of configuration properties for the client
    ConfigurationProperty:
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration property. Scopable using '.' as the level delimiter (e.g. ble.filtering.max_contacts)
        value:
          type: object
          description: The value of the configuration property an object
      required:
        - name
        - value
